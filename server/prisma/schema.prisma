datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Agent {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  fullName      String?
  role          String    @default("Agent")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  evaluations   Evaluation[]
  dashboardData DashboardData[]
  userFeatures  UserFeature[]
  chatLogEvaluations ChatLogEvaluation[]
  teamId        String?
  team          Team?      @relation("TeamMembers", fields: [teamId], references: [id])
  leadingTeam   Team[]     @relation("TeamLeader")
  managedTeams  Team[]     @relation("TeamManager")
}

model Evaluation {
  id          String   @id @default(cuid())
  userId      String
  user        Agent     @relation(fields: [userId], references: [id])
  title       String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DashboardData {
  id          String   @id @default(cuid())
  userId      String
  user        Agent     @relation(fields: [userId], references: [id])
  data        String   // Store JSON as a string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserFeature {
  id           String   @id @default(cuid())
  userId       String
  featureName  String
  featureValue String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         Agent     @relation(fields: [userId], references: [id])

  @@unique([userId, featureName])
}

model ChatLogEvaluation {
  id          String   @id @default(cuid())
  userId      String
  user        Agent     @relation(fields: [userId], references: [id])
  chatlog     String   @db.Text
  scenario    String
  coherence   Int
  politeness  Int
  relevance   Int
  resolution  Int
  shift       String?
  dateTime    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Team {
  id        String   @id @default(cuid())
  name      String
  leaderId  String? // made optional
  leader    Agent?   @relation("TeamLeader", fields: [leaderId], references: [id]) // made optional
  agents    Agent[]  @relation("TeamMembers")
  managerId String?
  manager   Agent?   @relation("TeamManager", fields: [managerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}